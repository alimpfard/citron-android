import Library/AST/Utils: 'quoteAllUnbound'.
Object on: 'match:' do: {:self:ast
  #ast -> $[
  # [pattern, guard*, consequence],
  # [pattern, guard*, consequence]
  # ...
  #]
  #pattern -> quoted (or literal) expression
  #guard -> expression
  #consequence -> expression
  var done is True.
  var ret is Nil.
  var cblk is thisBlock.
  ast each_v: {:__PMATCH_V0:__PMATCH_AV
    __PMATCH_V0 is $!(__PMATCH_V0). #Parse the tuple
    done is True.
    ret is {
      self message: 'unpack:' arguments: [$!(__PMATCH_V0 head), Reflect thisContext].
      $!(__PMATCH_V0 tail init) all: (\:__PMATCH_V1 Reflect runHere: {^$!(__PMATCH_V1).} forObject: self arguments: []), ifFalse: {
        cblk error: 'guard fail'.
      }.
      ^Reflect runHere: {^$!(__PMATCH_V0 last).} forObject: self arguments: [].
    } catch: {:e done is False. }, run.
    done break.
  }.
  done ifFalse: { cblk error: 'non-exhaustive pattern match'. }.
  ^ret.
}.

Object on: 'on:pdo:' do: {:msg:ast
  #ast -> $[
  # [pattern, guard*, return],
  # [pattern, guard*, return]
  # ...
  #]
  #pattern -> Array of quoted or literal expression
  var blk is $!$({:*args
    ^args match: $`(ast).
  }).
  me on: msg do: blk.
}.

#:declare lazyev match

# This one's a bit of a doozy
# arg1 is the ast of this expression:
# {
#   match => result.
#   match => result.
# }
#
# which is transformed into this:
# [
#   [match, result],
#   [match, result]
# ]
#
# However the unbound names in `match' are
# transformed to be symbols instead
#
# e.g. in a context that `x' is not defined,
# it is transformed into \x
var match is {\:__arg0:__arg1:__obj:__mid_ast
  __arg0 is __arg0 evaluate.
  ^__arg1 type = 'CODEBLOCK' either: { # This is a block
    __arg1 is __arg1 at: 1. # Skip the arguments section
    __obj is Array new. # Get a new array
    __arg1 each_v: {:__ast
      (__ast type = 'EXPRASSIGNMENT') ifFalse: { thisBlock error: 'Syntax error: Expected assignment, but got ' + __ast type. }.
      __mid_ast is quoteAllUnbound applyTo: (__ast at: 0).
      __obj push: [(__mid_ast), (__ast at: 1)].
    }.
    ^__arg0 match: __obj.
  } or: { # Just pass it along
    ^__arg0 match: __arg1.
  }.
}.
