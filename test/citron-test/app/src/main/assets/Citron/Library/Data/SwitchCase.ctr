var CaseConstruct is Object new.
CaseConstruct on: 'initFor:' do: {:obj
  my obj is obj.
  my casemap is Map new.
  my default is Nil.
}.
CaseConstruct on: 'case:do:' do: {:s:b
  my casemap put: b at: s.
}.
CaseConstruct on: 'default:' do: {:b my default is b.}.
CaseConstruct on: 'switch:' do: {:value
  var ans is my casemap at: value.
  var default is my default or: {\ {^Nil.}. }.
  ^ans isNil either: {^default run.} or: {^ans run.}.
}.
CaseConstruct on: 'switch' do: {
  var ans is my casemap at: my obj.
  var default is my default or: \:_ {^Nil.}.
  ^ans isNil either: default or: ans.
}.
['respondTo:and:and:and:', 'respondTo:and:and:and:and:', 'respondTo:and:and:and:and:and:', 'respondTo:'] each_v: {:msgv
  CaseConstruct on: msgv do: {:self:msg:*args
    msg is msg split: ':'.
    msg last = 'do' ifFalse: {
      thisBlock error: 'CaseConstruct expectes (case:)+do:'.
    }.
    msg is args pop.
    args each: {:_:v
      self case: v do: msg.
    }.
  }.
}.
Object on: 'case:do:' do: { :s :b
  var ret is const CaseConstruct new initFor: me.
  ^ret case: s do: b.
}.
