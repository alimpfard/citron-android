import on: '__map2Array:' do: {\:map :arr
  arr is Array new.
  map each: {:k:v arr push: [k, v].}.
  arr.
}.
import genAccessors: 'return'.
import return: (Map new).

import genAccessors: '__is_being_imported'.
import __is_being_imported: False.

import genAccessors: '__loaded_modules'.
import __loaded_modules: Map new.

import on: 'searchPaths' do: {^my searchPaths.}.
import on: 'export:as:' do: {:object:name
  Reflect addGlobalVariable: name.
  Reflect set: name to: object.
}.
import on: 'require-parent' do: {
  me message: '..' arguments: [].
}.
import on: 'dir:' do: {:dname
  me message: dname arguments: [].
}.
import on: '__resolve_request:internally:' do: {:name:itn
  var file is Nil.
  var path is Nil.
  var is_dir is False.
  var xc_path is name split: '/'.
  name is xc_path last.
  var ext_path is xc_path init join: '/'.
  var full_path is Nil.
  my searchPaths each: {:i:v
  # Pen write: v, brk.
    file isNil not break.
    v is v + '/' + ext_path.
    v is File new: v, realPath.
    (var f is File new: (v + '/$$name' + '.ctr')) exists ifTrue: {
      (File typeOf: (f realPath), = 'file') ifTrue: {
        path is File new: v, realPath.
        full_path is path + '/$$name' + '.ctr'.
        file is f.
      }.
    }.
    (var f is File new: (v + '/$$name')) exists ifTrue: {
      (File typeOf: (v + '/$$name'), = 'folder') ifTrue: {
        path is f realPath.
        file is File new: (path + '/main.ctr').
        full_path is path + '/main.ctr'.
        is_dir is True.
      }.
    }.
  }.
  file isNil & itn not ifTrue: {
    ^name = 'name' either: Nil or: {
      thisBlock error: (
        'Could not find neither a package, nor a standalone file representing $$name in the search paths: \n%s'
          %
        [(self searchPaths fmap: {:p ^p + ' aka (' + (File new: p, realPath) + ')'.}, join: '\n')]).
      }.
  }.
  ^[full_path, path, file].
}.
import on: 'return:' do: {:obj
  var path is (File new: '.', realPath).
  var spath is my searchPaths filter: {:i:v ^path contains: v.}.
  var import_name is path skip: (spath at: 0, length + 1).
  my return put: obj at: import_name.
}.
import on: 'return' do: {}.
import on: '__realloc:' do: {:map
  var m is Map new.
  map each: {:i:v m put: v at: i.}.
  ^m.
}.
import on: '__load:' do: {:self:name
  var paths is __resolve_request: name internally: False.
  paths = Nil ifTrue: { ^self. }.
  var full_path is paths @ 0.
  var path is paths @ 1.
  var file is paths @ 2.
  var _lm is my __loaded_modules.
  ^(_lm contains: full_path)
    either: {
      Program warning: '[ctr]::module $$path was already loaded'.
      ^_lm at: full_path.
    }
    or: {
      var oldp is Program changeDirectory: path.
      var imp is import __is_being_imported.
      import __is_being_imported: True.
      var pf is Reflect runInNewContext: { file runHere. }.
      import __is_being_imported: imp.
      Program changeDirectory: oldp.
      _lm put: pf at: full_path.
      ^pf.
    }.
}.
import on: '__unify:' do: {:val
  ^val isA: Array, either: val or: [val].
}.
import on: 'respondTo:' do: {:name me __load: name. }.
import on: 'respondTo:and:' do: {:mods:*names
  var loaded is mods split: ':', fmap: \:mod import __load: mod.
  ^names imap: {:i:names
    var modv is import __realloc: loaded @ i.
    ^names = \* either: {
      modv each: \:name:value import export: value as: name.
      ^[].
    } or: {
      names is import __unify: names.
      ^names
        fmap:
          (\:name name isA: CodeBlock, either: (\:_ import __map2Array: (Map cnew: name)) or: \:_ [[name, name]]),
        fmap: \:x (x fmap: {:name
          var p is modv at: name head.
          import export: p as: name last.
          ^p.
        }), sum.
    }.
  }, foldl: (\:acc:x acc + ([] + x or: [x])) accumulator: Array new.
}.
['respondTo:and:and:',
 'respondTo:and:and:and:',
 'respondTo:and:and:and:and:',
 'respondTo:and:and:and:and:and:'
] fmap: \:msg import learn: msg means: 'respondTo:and:'.
